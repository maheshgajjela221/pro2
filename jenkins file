pipeline {
    agent any

    environment {
        REPO_URL = 'https://github.com/maheshgajjela221/pro2'
        BRANCH = 'master'
        JAVA_HOME = '/usr/lib/jvm/java-11-openjdk-amd64'
        
        DOCKER_IMAGE = 'maheshgajjela221/pro2'
        TEST_SERVER = '44.200.230.243'
        PROD_SERVER = '3.235.91.97'
    }

    stages {
        stage('Checkout & Build JAR') {
            steps {
                git branch: "${BRANCH}", url: "${REPO_URL}"
                sh """
                mvn clean package -Dmaven.compiler.source=11 -Dmaven.compiler.target=11
                """
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    def jarName = sh(script: "ls target/*.jar | head -1", returnStdout: true).trim()
                    sh "cp ${jarName} app.jar"
                }

                withCredentials([usernamePassword(credentialsId: 'docker-hub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh """
                    docker build -t ${DOCKER_IMAGE}:latest .
                    echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                    docker push ${DOCKER_IMAGE}:latest
                    """
                }
            }
        }

        stage('Deploy to Test Server') {
            steps {
                sshagent (credentials: ['ssh-key']) {
                    sh """
                    ssh -o StrictHostKeyChecking=no ubuntu@${TEST_SERVER} '
                        docker pull ${DOCKER_IMAGE}:latest &&
                        docker stop pro2 || true &&
                        docker rm pro2 || true &&
                        docker run -d --name pro2 -p 8080:8080 ${DOCKER_IMAGE}:latest
                    '
                    """
                }
            }
        }

        stage('Test Approval') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    input message: "App deployed to test at http://${TEST_SERVER}:8080 â€” Approve to deploy to production?", ok: 'Deploy to Production'
                }
            }
        }

        stage('Deploy to Production Server') {
            steps {
                sshagent (credentials: ['ssh-key']) {
                    sh """
                    ssh -o StrictHostKeyChecking=no ubuntu@${PROD_SERVER} '
                        docker pull ${DOCKER_IMAGE}:latest &&
                        docker stop pro2 || true &&
                        docker rm pro2 || true &&
                        docker run -d --name pro2 -p 8080:8080 ${DOCKER_IMAGE}:latest
                    '
                    """
                }
            }
        }
    }

    post {
        always {
            cleanWs()
            echo "Pipeline completed."
        }
        success {
            echo "Deployment successful!"
        }
        failure {
            echo "Deployment failed."
        }
    }
}
